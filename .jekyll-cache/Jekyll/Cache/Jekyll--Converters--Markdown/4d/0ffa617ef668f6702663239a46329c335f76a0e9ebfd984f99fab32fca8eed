I"_
<h1 id="til2020-02-27">TIL(2020-02-27)</h1>
<hr />

<h2 id="git-커밋-로그-정리">Git 커밋 로그 정리</h2>
<ul>
  <li>git rebase -i HEAD~2로 이전 커밋과 합치기<br />
=&gt; push 이전에 로컬에서 해야겠다</li>
  <li>git cherry-pick으로 다른 브랜치의 특정 커밋만 가져오기</li>
</ul>

<h2 id="gunicorn">Gunicorn</h2>
<ol>
  <li>설치 (pip install gunicorn)</li>
  <li>구동 확인 (gunicorn config.wsgi –bind=0.0.0.0:8000)</li>
  <li>서비스 등록 후 확인</li>
</ol>

<h2 id="nginx">Nginx</h2>
<ol>
  <li>설치 (apt-get install nginx)</li>
  <li>구동 확인(systemctl start/enable)</li>
  <li>nginx/sites-available과 sites-enabled에 추가 후 확인</li>
</ol>

<h2 id="github-flow-개념">Github flow 개념</h2>
<ul>
  <li>자동화의 개념</li>
  <li>master 브랜치에 대한 role만 정확하다면 나머지 브랜치들에는 관여를 하지 않는다</li>
  <li>master는 항상 최신의 상태이며 stable 상태로 Product에 배포되는 브런치이다</li>
  <li>pull request 기능을 사용하도록 권장</li>
  <li>피드백이나 도움이 필요할 때, 그리고 머징 준비가 완료되었을 때는 pull request를 생성</li>
  <li>master에서 새로운 브랜치를 딴다면 이름은 어던 일을 하는지 명확하게 작성 (ex. feature-페이지이름)</li>
  <li>수시로 push</li>
  <li>이해관계가 연결된 사람들과 충분한 논의 후에 master로 merge</li>
  <li>master로 머지가 일어나면 hubot을 이용하여 자동으로 배포가 되도록 설정</li>
</ul>

<h2 id="github-flow-장점">Github Flow 장점</h2>
<ul>
  <li>단순하니 git을 처음 접하는 사람에게 정말 좋은 시스템</li>
  <li>github 사이트에서 제공하는 기능을 모두 사용하여 작업을 진행</li>
  <li>
    <p>CI가 필수적</p>
  </li>
  <li>CI(Continuous integration): 작은 단위의 작업, 빈번한 적용. Jenkins가 대표적.</li>
</ul>

<h2 id="github-flow-단점">Github Flow 단점</h2>
<ul>
  <li>CI와 배포 자동화가 되어있지 않은 시스템에서는 사람이 관련된 업무를 진행</li>
  <li>경험이 부족하니 몸으로 와닿게 실감은 안나지만 시스템에 기능이 많아지고, 협업하는 사람들의 수가 늘어나면 너무 간단한 것이 단점이 될 수 있겠다는 생각이 든다</li>
</ul>

<h2 id="배운-점">배운 점</h2>
<ul>
  <li>먼저 자신이 코드를 받았던 때부터 현재까지 저장소 코드의 변경 내용을 자신의 코드에 반영되도록 자신의 코드를 업데이트한 후 자신의 코드를 제출해야 한다.</li>
</ul>
:ET